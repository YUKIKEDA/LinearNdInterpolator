#include <gtest/gtest.h>
#include "LinearNdInterpolator.h"
#include <cmath>
#include <vector>
#include <limits>
#include <string>
#include <chrono>

// Auto-generated SciPy Reference Validation Tests
// Generated from: script/out/scipy_reference_data.json
// DO NOT EDIT THIS FILE MANUALLY - Regenerate using generate_scipy_cpp_tests.py

class SciPyReferenceTest : public ::testing::Test {
protected:
    void SetUp() override {
        exact_tolerance_ = 1e-12;  // For exact vertex matches
        interpolation_tolerance_ = 1e-10;  // For linear interpolation
        loose_tolerance_ = 1e-6;   // For complex cases with numerical instability
    }
    
    double exact_tolerance_;
    double interpolation_tolerance_;
    double loose_tolerance_;
    
    void validateExactMatch(
        const std::vector<std::vector<double>>& points,
        const std::vector<double>& values,
        const std::vector<double>& query_point,
        double expected_result
    ) {
        LinearNdInterpolator interp(points, values);
        double result = interp.interpolate(query_point);
        EXPECT_NEAR(result, expected_result, exact_tolerance_)
            << "Exact match failed for point [" << formatPoint(query_point) << "]";
    }
    
    void validateInterpolation(
        const std::vector<std::vector<double>>& points,
        const std::vector<double>& values,
        const std::vector<double>& query_point,
        double expected_result,
        bool use_loose_tolerance = false
    ) {
        LinearNdInterpolator interp(points, values);
        double result = interp.interpolate(query_point);
        double tolerance = use_loose_tolerance ? loose_tolerance_ : interpolation_tolerance_;
        EXPECT_NEAR(result, expected_result, tolerance)
            << "Interpolation failed for point [" << formatPoint(query_point) << "]\n"
            << "Expected: " << expected_result << ", Got: " << result;
    }
    
    void validateOutOfHull(
        const std::vector<std::vector<double>>& points,
        const std::vector<double>& values,
        const std::vector<double>& query_point
    ) {
        LinearNdInterpolator interp(points, values);
        double result = interp.interpolate(query_point);
        // Our implementation returns nearest neighbor for out-of-hull points
        // SciPy returns NaN, but we expect finite values
        EXPECT_TRUE(std::isfinite(result))
            << "Out-of-hull point should return finite value, got: " << result
            << " for point [" << formatPoint(query_point) << "]";
        EXPECT_FALSE(std::isnan(result))
            << "Our implementation should not return NaN";
    }
    
private:
    std::string formatPoint(const std::vector<double>& point) {
        std::string result;
        for (size_t i = 0; i < point.size(); ++i) {
            if (i > 0) result += ", ";
            result += std::to_string(point[i]);
        }
        return result;
    }
};


// Test Case: 2D_Basic_Triangle
// Description: Basic 2D triangle interpolation
TEST_F(SciPyReferenceTest, 2D_Basic_Triangle) {
    std::vector<std::vector<double>> points = {
        {0.0000000000, 0.0000000000},
        {1.0000000000, 0.0000000000},
        {0.0000000000, 1.0000000000},
        {0.5000000000, 0.5000000000},
    };

    std::vector<double> values = {0.0000000000, 1.0000000000, 1.0000000000, 1.0000000000};

    // Query 1
    validateExactMatch(points, values, {0.0000000000, 0.0000000000}, 0.0000000000);

    // Query 2
    validateExactMatch(points, values, {1.0000000000, 0.0000000000}, 1.0000000000);

    // Query 3
    validateExactMatch(points, values, {0.0000000000, 1.0000000000}, 1.0000000000);

    // Query 4
    validateExactMatch(points, values, {0.5000000000, 0.5000000000}, 1.0000000000);

    // Query 5
    validateInterpolation(points, values, {0.2500000000, 0.2500000000}, 0.5000000000);

    // Query 6
    validateInterpolation(points, values, {0.3000000000, 0.4000000000}, 0.7000000000);

    // Query 7
    validateInterpolation(points, values, {0.7500000000, 0.2500000000}, 1.0000000000);

    // Query 8
    validateOutOfHull(points, values, {-0.5000000000, -0.5000000000});

    // Query 9
    validateOutOfHull(points, values, {2.0000000000, 2.0000000000});

    // Query 10
    validateInterpolation(points, values, {0.1000000000, 0.1000000000}, 0.2000000000);

}

// Test Case: 2D_Complex_Random
// Description: Complex 2D random points with f(x,y) = x + y
TEST_F(SciPyReferenceTest, 2D_Complex_Random) {
    std::vector<std::vector<double>> points = {
        {-0.2509197623, 0.9014286128},
        {0.4639878836, 0.1973169684},
        {-0.6879627191, -0.6880109593},
        {-0.8838327757, 0.7323522915},
        {0.2022300235, 0.4161451556},
        {-0.9588310114, 0.9398197043},
        {0.6648852816, -0.5753217786},
        {-0.6363500656, -0.6331909803},
        {-0.3915155141, 0.0495128633},
        {-0.1361099627, -0.4175417196},
    };

    std::vector<double> values = {0.6505088505, 0.6613048520, -1.3759736784, -0.1514804841, 0.6183751791, -0.0190113071, 0.0895635030, -1.2695410459, -0.3420026508, -0.5536516823};

    // Query 1
    validateInterpolation(points, values, {0.0000000000, 0.0000000000}, -0.0000000000, true);

    // Query 2
    validateOutOfHull(points, values, {0.5000000000, 0.3000000000});

    // Query 3
    validateInterpolation(points, values, {-0.2000000000, 0.4000000000}, 0.2000000000, true);

    // Query 4
    validateOutOfHull(points, values, {0.8000000000, -0.1000000000});

    // Query 5
    validateOutOfHull(points, values, {2.0000000000, 2.0000000000});

    // Query 6
    validateOutOfHull(points, values, {-2.0000000000, -2.0000000000});

}

// Test Case: 3D_Basic_Tetrahedron
// Description: Basic 3D tetrahedron interpolation
TEST_F(SciPyReferenceTest, 3D_Basic_Tetrahedron) {
    std::vector<std::vector<double>> points = {
        {0.0000000000, 0.0000000000, 0.0000000000},
        {1.0000000000, 0.0000000000, 0.0000000000},
        {0.0000000000, 1.0000000000, 0.0000000000},
        {0.0000000000, 0.0000000000, 1.0000000000},
        {1.0000000000, 1.0000000000, 1.0000000000},
    };

    std::vector<double> values = {0.0000000000, 1.0000000000, 1.0000000000, 1.0000000000, 3.0000000000};

    // Query 1
    validateExactMatch(points, values, {0.0000000000, 0.0000000000, 0.0000000000}, 0.0000000000);

    // Query 2
    validateExactMatch(points, values, {1.0000000000, 0.0000000000, 0.0000000000}, 1.0000000000);

    // Query 3
    validateExactMatch(points, values, {0.0000000000, 1.0000000000, 0.0000000000}, 1.0000000000);

    // Query 4
    validateExactMatch(points, values, {0.0000000000, 0.0000000000, 1.0000000000}, 1.0000000000);

    // Query 5
    validateInterpolation(points, values, {0.2500000000, 0.2500000000, 0.2500000000}, 0.7500000000);

    // Query 6
    validateInterpolation(points, values, {0.1000000000, 0.2000000000, 0.3000000000}, 0.6000000000);

    // Query 7
    validateOutOfHull(points, values, {2.0000000000, 2.0000000000, 2.0000000000});

    // Query 8
    validateOutOfHull(points, values, {-1.0000000000, -1.0000000000, -1.0000000000});

}

// Test Case: 4D_Basic_Simplex
// Description: Basic 4D simplex interpolation
TEST_F(SciPyReferenceTest, 4D_Basic_Simplex) {
    std::vector<std::vector<double>> points = {
        {0.0000000000, 0.0000000000, 0.0000000000, 0.0000000000},
        {1.0000000000, 0.0000000000, 0.0000000000, 0.0000000000},
        {0.0000000000, 1.0000000000, 0.0000000000, 0.0000000000},
        {0.0000000000, 0.0000000000, 1.0000000000, 0.0000000000},
        {0.0000000000, 0.0000000000, 0.0000000000, 1.0000000000},
        {0.5000000000, 0.5000000000, 0.5000000000, 0.5000000000},
    };

    std::vector<double> values = {0.0000000000, 1.0000000000, 1.0000000000, 1.0000000000, 1.0000000000, 2.0000000000};

    // Query 1
    validateExactMatch(points, values, {0.0000000000, 0.0000000000, 0.0000000000, 0.0000000000}, 0.0000000000);

    // Query 2
    validateExactMatch(points, values, {1.0000000000, 0.0000000000, 0.0000000000, 0.0000000000}, 1.0000000000);

    // Query 3
    validateExactMatch(points, values, {0.5000000000, 0.5000000000, 0.5000000000, 0.5000000000}, 2.0000000000);

    // Query 4
    validateInterpolation(points, values, {0.2000000000, 0.2000000000, 0.2000000000, 0.2000000000}, 0.8000000000);

    // Query 5
    validateInterpolation(points, values, {0.1000000000, 0.3000000000, 0.2000000000, 0.4000000000}, 1.0000000000);

    // Query 6
    validateOutOfHull(points, values, {2.0000000000, 2.0000000000, 2.0000000000, 2.0000000000});

}

// Test Case: 2D_Collinear_Points
// Description: 2D interpolation with some collinear points
TEST_F(SciPyReferenceTest, 2D_Collinear_Points) {
    std::vector<std::vector<double>> points = {
        {0.0000000000, 0.0000000000},
        {1.0000000000, 1.0000000000},
        {2.0000000000, 2.0000000000},
        {0.0000000000, 1.0000000000},
    };

    std::vector<double> values = {0.0000000000, 2.0000000000, 4.0000000000, 1.0000000000};

    // Query 1
    validateInterpolation(points, values, {0.5000000000, 0.5000000000}, 1.0000000000);

    // Query 2
    validateInterpolation(points, values, {1.5000000000, 1.5000000000}, 3.0000000000);

    // Query 3
    validateOutOfHull(points, values, {0.5000000000, 0.0000000000});

}

// Test Case: 2D_Duplicate_Points
// Description: 2D interpolation with duplicate points
TEST_F(SciPyReferenceTest, 2D_Duplicate_Points) {
    std::vector<std::vector<double>> points = {
        {0.0000000000, 0.0000000000},
        {1.0000000000, 0.0000000000},
        {0.0000000000, 1.0000000000},
        {0.0000000000, 0.0000000000},
    };

    std::vector<double> values = {0.0000000000, 1.0000000000, 1.0000000000, 0.0000000000};

    // Query 1
    validateExactMatch(points, values, {0.0000000000, 0.0000000000}, 0.0000000000);

    // Query 2
    validateInterpolation(points, values, {0.5000000000, 0.5000000000}, 1.0000000000);

}

// Test Case: 2D_Large_Dataset
// Description: Performance test with 100 2D points, f(x,y) = x^2 + y^2
TEST_F(SciPyReferenceTest, 2D_Large_Dataset) {
    std::vector<std::vector<double>> points = {
        {6.9646918560, 2.8613933495},
        {2.2685145356, 5.5131476908},
        {7.1946896979, 4.2310646012},
        {9.8076419838, 6.8482973858},
        {4.8093190148, 3.9211751819},
        {3.4317801615, 7.2904970738},
        {4.3857224468, 0.5967789661},
        {3.9804425533, 7.3799540573},
        {1.8249173045, 1.7545175615},
        {5.3155137384, 5.3182758710},
        {6.3440095855, 8.4943179408},
        {7.2445532486, 6.1102351068},
        {7.2244338257, 3.2295891385},
        {3.6178865562, 2.2826323088},
        {2.9371404639, 6.3097612385},
        {0.9210493995, 4.3370117268},
        {4.3086276333, 4.9368509765},
        {4.2583029030, 3.1226122297},
        {4.2635130696, 8.9338916312},
        {9.4416001820, 5.0183667588},
        {6.2395295179, 1.1561839508},
        {3.1728548182, 4.1482621195},
        {8.6630915788, 2.5045536540},
        {4.8303426426, 9.8555978561},
        {5.1948511926, 6.1289452576},
        {1.2062866599, 8.2634080051},
        {6.0306012841, 5.4506800647},
        {3.4276383377, 3.0412078903},
        {4.1702221102, 6.8130076579},
        {8.7545684180, 5.1042233748},
        {6.6931378296, 5.8593655256},
        {6.2490350210, 6.7468905099},
        {8.4234243762, 0.8319498833},
        {7.6368284144, 2.4366637454},
        {1.9422296058, 5.7245695749},
        {0.9571251661, 8.8532682628},
        {6.2724897205, 7.2341635819},
        {0.1612920670, 5.9443187945},
        {5.5678519239, 1.5895964414},
        {1.5307051512, 6.9552952877},
        {3.1876642638, 6.9197029553},
        {5.5438324972, 3.8895057412},
        {9.2513248961, 8.4166999691},
        {3.5739756668, 0.4359146380},
        {3.0476807341, 3.9818568192},
        {7.0495883045, 9.9535848203},
        {3.5591486572, 7.6254781379},
        {5.9317691656, 6.9170179870},
        {1.5112745235, 3.9887629273},
        {2.4085589772, 3.4345601405},
        {5.1312815420, 6.6662455016},
        {1.0590848506, 1.3089495066},
        {3.2198060647, 6.6156433667},
        {8.4650622527, 5.5325734480},
        {8.5445248752, 3.8483781128},
        {3.1678789712, 3.5426467559},
        {1.7108182921, 8.2911263450},
        {3.3867084591, 5.5237007529},
        {5.7855146811, 5.2153305940},
        {0.0268806457, 9.8834541928},
        {9.0534157566, 2.0763586120},
        {2.9248941279, 5.2001015307},
        {9.0191137266, 9.8363088491},
        {2.5754206415, 5.6435904292},
        {8.0696868414, 3.9437005395},
        {7.3107303584, 1.6106901443},
        {6.0069856783, 8.6586445830},
        {9.8352160920, 0.7936579038},
        {4.2834727470, 2.0454285955},
        {4.5063649052, 5.4776357263},
        {0.9332671037, 2.9686077548},
        {9.2758424015, 5.6900373143},
        {4.5741199752, 7.5352599080},
        {7.4186215184, 0.4857903284},
        {7.0869739544, 8.3924334781},
        {1.6593788421, 7.8099793800},
        {2.8653661673, 3.0646975333},
        {6.6526146535, 1.1139217161},
        {6.6487244880, 8.8785679268},
        {6.9631126824, 4.4032787667},
        {4.3821438438, 7.6509609524},
        {5.6564200123, 0.8490416319},
        {5.8267108786, 8.1484370289},
        {3.3706638345, 9.2757657958},
        {7.5071700034, 5.7406382515},
        {7.5164398879, 0.7914896074},
        {8.5938907568, 8.2150411320},
        {9.0987165961, 1.2863119751},
        {0.8178008709, 1.3841557278},
        {3.9937871010, 4.2430686108},
        {5.6221837873, 1.2224354963},
        {2.0139950138, 8.1164434828},
        {4.6798757406, 8.0793820948},
        {0.0742637854, 5.5159272598},
        {9.3193214808, 5.8217545915},
        {2.0609572745, 7.1775756228},
        {3.7898584970, 6.6838394726},
        {0.2931972289, 6.3590035935},
        {0.3219793494, 7.4478065514},
        {4.7291300224, 1.2175435547},
    };

    std::vector<double> values = {56.6945045493, 35.5409556593, 69.6654675083, 143.0890183683, 38.5051641940, 64.9284626606, 19.5907065147, 70.3076448083, 6.4086550419, 56.5387445430, 112.3998949001, 89.8185248320, 62.6226901057, 18.2995133908, 48.4398809921, 19.6580027146, 42.9367696466, 27.8838507506, 97.9919633724, 114.3278189237, 40.2684899331, 27.2750863098, 81.3219447088, 120.4650191465, 64.5504488843, 69.7390393641, 66.0780650152, 20.9976500062, 63.8078257958, 102.6955644442, 79.1302583692, 84.5709702454, 71.6462188300, 64.2584784395, 36.5429526596, 79.2964475159, 91.6772500236, 35.3609410609, 33.5277918936, 50.7191907993, 58.0434924487, 45.8623336678, 156.4278507042, 12.9633236387, 25.1435415855, 148.7705460388, 70.8154559948, 83.0310232667, 18.1941803752, 17.5973597054, 70.7688793513, 2.8350095316, 54.1338882490, 102.2666478994, 87.8189194424, 22.5858032133, 71.6696752975, 41.9810641953, 60.6718533295, 97.6833893508, 86.2756019476, 35.5960615894, 178.0973841887, 38.4829044140, 80.6726196633, 56.0411011148, 111.0560029550, 97.3613684453, 22.5319169135, 50.3118178086, 9.6836194887, 118.4177768960, 77.7027154287, 55.2719374768, 120.6581395142, 63.7493160575, 17.6026942432, 45.4981033175, 123.0345057479, 67.8738021240, 77.7403881626, 32.7159590478, 100.3475856775, 97.4012057827, 89.3125289950, 57.1233243874, 141.3418591405, 84.4412421935, 2.5846853434, 33.9539666444, 33.1032990810, 69.9328307258, 87.1776519815, 30.4309686455, 120.7425793851, 55.7651367081, 59.0367375226, 40.5228913174, 55.5734931288, 23.8470830763};

    // Query 1
    validateInterpolation(points, values, {5.4263592579, 0.6677444323}, 31.1677051816, true);

    // Query 2
    validateOutOfHull(points, values, {6.5336487135, 9.9608632737});

    // Query 3
    validateInterpolation(points, values, {7.6939733707, 5.7377411366}, 92.3279135847, true);

    // Query 4
    validateInterpolation(points, values, {1.0263525921, 6.9983407477}, 50.5058717126, true);

    // Query 5
    validateInterpolation(points, values, {6.6116786733, 0.4909713062}, 46.1518930367, true);

    // Query 6
    validateInterpolation(points, values, {7.9229930184, 5.1871659089}, 90.4081504330, true);

    // Query 7
    validateInterpolation(points, values, {4.2586769420, 7.8818717360}, 80.5784029344, true);

    // Query 8
    validateInterpolation(points, values, {4.1156922321, 4.8102627551}, 40.3223827284, true);

    // Query 9
    validateInterpolation(points, values, {1.8162884267, 3.2131889951}, 14.2354695032, true);

    // Query 10
    validateInterpolation(points, values, {8.4553299656, 1.8690374893}, 75.7287038844, true);

}

// End of auto-generated tests
